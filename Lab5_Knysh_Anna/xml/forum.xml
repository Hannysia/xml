<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="forumStyle.xsl"?>
<!-- <!DOCTYPE forum SYSTEM "forumSchema.dtd"> -->

<forum xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.example.com/forum forumSchema.xsd">      

    <header>Студентський форум</header>
    <header_subject>Функціональне програмування</header_subject>

    <article category="Functional Programming? Don`t Even Bother, It`s a Silly Toy">
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"Між сатирою та реальністю: критичний погляд на функціональне програмування"</article_name>
                </user_article>
                <user_full_information>
                    <username>Данило К.</username>
                    <date>середа 27 вересня 2023</date>
                    <time>19:24 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>Між сатирою та реальністю: критичний погляд на функціональне програмування</topic>
            <article_body>Вітаю усіх! Дякую за те, що почали читати мій відгук щодо статті Іллі Суздальницького з "Better Programming" на тему функціонального програмування. Сподіваюсь на будь-який фідбек з вашої сторони щодо моєї думки.
                            Спочатку читаючи текст, мене дещо шокувала категоричність автора щодо відкидання функціонального програмування. Проте, до кінця статті стало зрозуміло, що це сатира. І я вдячний автору за цю примітку, адже новачкам у галузі дійсно важливо розуміти, що не варто сліпо вірити всьому, що пишуть в інтернеті.

                            Часто в інтернет-дискусіях можна побачити жваві сперечання стосовно того, який підхід до програмування є кращим — функціональний чи об'єктно-орієнтований. Ілля в своїй статті дотепно висміяв обидва підходи, але насправді обидва з них мають своє місце у світі програмування. Функціональне програмування, з його акцентом на незмінність та чисті функції, може пропонувати вирішення для складних проблем, зокрема в області паралелізму та конкуренції.

                            З іншого боку, об'єктно-орієнтований підхід, який акцентується на створенні моделей реального світу через об'єкти та їх взаємодію, може бути дуже ефективним для побудови великих та складних систем. Як наголосив Суздальницький, переускладнені "enterprise-grade" підходи можуть виглядати комічно, але в деяких контекстах вони можуть бути абсолютно виправданими.

                            Стаття Іллі підкреслює важливість полягає не в тому, який підхід "кращий", а в тому, який підхід найбільш підходить для конкретної задачі або проекту. Розробник має змогу вибирати з різноманітних інструментів у своєму арсеналі, а від його вибору залежить успіх проекту. Об'єктно-орієнтоване та функціональне програмування — лише два з багатьох інструментів, які можуть допомогти розробнику досягти своєї мети.

                            Ілля в своїй статті намагається висвітлити проблему переускладнення в програмуванні, прикладом чого є "FizzBuzzEnterpriseEdition". Надто часто розробники прагнуть демонструвати свою експертизу через складні архітектурні рішення, навіть коли можна обійтися простішими методами. Це може призвести до непотрібної складності і збільшення кількості потенційних помилок у коді.

                            Проте, під час читання статті, мене особисто непокоїла думка про те, що деякі читачі можуть сприймати іронічні коментарі Іллі дослівно, не здогадуючись про сатиричний характер матеріалу. В інформаційному суспільстві, де іноді не вистачає часу для глибокого аналізу матеріалу, деякі можуть просто не розібратися в тонкощах авторського стилю.

                            Сатира — це потужний інструмент висміювання і критики, але важливо пам'ятати, що не завжди всі розуміють її правильно. Це особливо актуально для новачків у галузі програмування, які тільки починають знайомитися з різними підходами та парадигмами. Для них важливо не тільки вчитися, але й вміти відрізняти справжню інформацію від жартів.

                            Хочу завершити своєю вдячністю автору за цю статтю. Вона нагадала мені про важливість критичного мислення в галузі програмування і про те, що завжди варто шукати більше джерел інформації перед тим, як приймати будь-які висновки.
            </article_body>
        </content>



        <authors_image>../img/Danylo_K.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Між сатирою та реальністю: критичний погляд на функціональне програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Вероніка В.</username>
                        <date>середа 27 вересня 2023</date>
                        <time>20:56 PM</time>
                        <response>
                            Хочу подякувати Данилу за перший абзац, адже від надихає написати відгук, це відмінна риса, тому її варто підкреслити.

                            Оцінюючи основний матеріал, мушу визнати, що автором порушено важливе питання надмірної сатиричності Іллі. Хоча клікбейт назви й привертає увагу, але багато користувачів інтернету надто поверхньо ставляться до матеріалу, тому цілком вірогідно можуть не звернути увагу на постскриптом чи навіть не дійти до нього. Фанати ООП погодяться з автором з перших сторінок, а прихильники функціонального підходу - обуряться та якнайшвидше закриють, аби не заглиблюватися в той "бруд". Данило правильно зазначає наскільки важливе критичне мислення в сьогоденні, додам, що це стосується не тільки програмування, а й будь-якої сфери життя. Тільки обираючи шлях споглядати та міркувати, можна побудувати незалежний світогляд, а думки інших не завжди треба сприймати на віру, навіть якщо це ваша найближча людина.

                            Автор змусив це пригадати, що однозначно є перевагою статті.
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Veronika_V.png</authors_image>

            </comment>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Між сатирою та реальністю: критичний погляд на функціональне програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Данило К.</username>
                        <date>середа 27 вересня 2023</date>
                        <time>21:58 PM</time>
                        <response>Превелике дякую за фідбек!</response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Danylo_K.png</authors_image>
            </comment>

            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Між сатирою та реальністю: критичний погляд на функціональне програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Софія Л.</username>
                        <date>середа 27 вересня 2023</date>
                        <time>22:08 PM</time>
                        <response>Дякую, що цей відгук легко читати, я розумію думки та почуття з приводу статті, та бачу, що Данило робив свій аналіз при її написанні, що також є приємним

                                Мені подобається як він висловив думку з приводу з приводу статті, виділивши найголовніше. Я згодна, що деякі новачки не могли зрозуміти іроніі Іллі, адже я й сама була впевнена, що це іронія усього лише на 90%)

                                Вважаю цю статтю унікальною в тому як Данило аналізує контекст перепалок, який підштовхнув Іллю написати статтю, а також взаємодію інших читачів, які могли не мислити критично, з цією ж статтєю

                                Дякую, Данило, за відгук, а мені приємно було писати фідбек!)
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Sophia_L.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Між сатирою та реальністю: критичний погляд на функціональне програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Данило К.</username>
                        <date>середа 27 вересня 2023</date>
                        <time>22:19 PM</time>
                        <response>Дякую за твій фідбек, гріє душу, що ти також розділяєш мою думку!)</response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Danylo_K.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Між сатирою та реальністю: критичний погляд на функціональне програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Вероніка В.</username>
                        <date>середа 27 вересня 2023</date>
                        <time>23:04 PM</time>
                        <response>
                            Софія, насправді дуже цікаво, коли ви зрозуміли саркастичність викладеного в статті, чи тримала вона вас в напрузі аж до постскриптума або в який момент іронія виплила назовні?
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Veronika_V.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Між сатирою та реальністю: критичний погляд на функціональне програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Софія Л.</username>
                        <date>четвер 28 вересня 2023</date>
                        <time>08:45 AM</time>
                        <response>Дякую за питання)

                                Я спочатку була введена в оману т.к. новачок у ФП, яка нічого не підозрює. Але це було приблизно до першого сніпету коду: на фоні нього вже почала розуміти всю картину. Потім вже й сміялась з "аргументів" автора, а чим далі, тим більше ситуацій, коли жарт видає за головний аргумент. Потім й аналізувала контекст статті, дивившись дискусію в стилі ООП vs ФП

                                Я навіть думала у своєму відгуку зробити підбірку де замість аргументу підзаголовку був жарт, але
                                1. Вся стаття є сатирою на те які аргументи в свій час колись чув автор, тобто, він використовує іронію в кожному аргументі
                                2. Мій відгук і так був досить змістовним

                                Але ні в чому не можна бути впевненим на 100% відсотків, тим більш, не знаючи якою особистістю є автор)
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Sophia_L.png</authors_image>
            </comment>



            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Між сатирою та реальністю: критичний погляд на функціональне програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Вероніка В.</username>
                        <date>четвер 28 вересня 2023</date>
                        <time>12:51 PM</time>
                        <response>

                            Дякую за відповідь)

                            Моє питання було поставлено з метою дізнатися думку людини, яку я вважаю досить критичною по життю.

                            В моєму випадку, оцей постскриптум був дуже доречний, адже, як також новачок в сфері функціонального програмування, сприйняла статтю досить серйозно незважаючи навіть на жартівливі моменти в середині тексту. Це сприяло подальшому ресьорчу, в ході якого я виявила, що таких «приверженців» ооп дуже багато, вони пишуть подібні думки без ніяких сумнівів та гумору!

                            Моя думка одразу не співпала з автором статті, адже, на мій суб‘єктивний погляд, нічого не робиться даремно, а тим більше - не вчиться. Можливо це викликано моїм беззумовним почуттям пошани до математики, але навіть в тому «приниженні» функціонального підходу, я знайшла переваги.

                            Отож, Софія, приємно було отримати твою відповідь на моє запитання.                        
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Veronika_V.png</authors_image>
            </comment>
        </comments>
    </article> 


    <article category="Functional Programming? Don`t Even Bother, It`s a Silly Toy">
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"Упослідження через іронічне возвеличення"</article_name>
                </user_article>
                <user_full_information>
                    <username>Aнна К.</username>
                    <date>середа 27 вересня 2023</date>
                    <time>17:38 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>Упослідження через іронічне возвеличення</topic>
            <article_body>
                Вочевидь автор є великим фанатом функціонального програмування і не раз чув несхвальні відгуки щодо його об'єкта захоплення від прибічників об’єктно-орієнтованого програмування. На мою думку, саме це і надихнуло автора написати таку статтю, у якій у доволі саркастичній формі представлені всі недоліки об’єктно-орієнтованого підходу у порівнянні з функціональним.

                Насамперед мушу зізнатися, що на перших сторінках своєї статті автор справив на мене враження людини, що здобула свою професію за межами університету, і тому має певні світоглядні прогалини. Я вважаю, що перш за все університетська освіта надає людині кругозір і ознайомлює її з різними підходами вирішення тієї чи іншої задачі.

                Буквальне возвеличення об’єктно-орієнтованого підходу і одночасне упослідження функціонального означало б те, що людина як мінімум не обізнана в конкретних галузях застосування щонайменше функціонального програмування, а це: розробка веб-додатків, обробка даних та аналітика, ШІ, хмарні обчислення, робототехніка та автоматизація тощо. Саме ця «необізнаність», а насправді хитро продуманий план уведення читача в оману задля пропагування зовсім інших поглядів, напочатку змусив мене думати, що автор зовсім початківець в ІТ. Проте, коли він почав розмірковувати про «a properly abstracted OOP program» і в наступному абзаці після зразка коду у 85!!! рядків видав фразу «Don’t let the simplicity fool you!» все стало на свої місця і стаття набула зовсім інших барв.

                А й справді, автор знайшов досить дотепний спосіб відповісти своїм опонентам-противникам функціонального програмування у досить гумористичній формі вказавши на їхню світоглядову обмеженість.

                Яскравим прихильникам ООП довелося знатно попітніти мізками, щоб відповісти на закиди про довжину коду, а отже ефективність роботи айтівця, про рефакторинг коду, що легше робиться з функціональним кодом аніж з об’єктно-орієнтованим, що теж значно економить часовий ресурс програміста, про тестування коду, де знову ж таки переможцем стає ФП і це очевидно! Але про все по порядку.

                                        I.          Functional Programming is Unable to Fulfill Complex Enterprise Requirements

                З цього пункту автор готує теплу ванну прибічникам ООП, висловлюючи всі їхні думки щодо переваг першого над ФП, опускаючи такий важливий моменти, що передусім все залежить від специфіки проєкту. Для деяких завдань, зокрема, обробки даних і реалізації алгоритмів, використання ФП може бути дуже потужним, а ООП – недоцільним, але  в інших сферах, наприклад, написанні ігор або розробці користувацьких інтерфейсів, такий підхід, як об'єктно-орієнтоване програмування, буде ефективнішими.

                Автор не згадав також про те, що функціональне програмування спеціалізується на використанні функцій як основної абстракції. У ФП абстракція часто виражається через функції вищих порядків, які можуть бути передані як аргументи і повернуті з функцій. Це сприяє композиції функцій і забезпечує ступінь абстракції. А інкапсуляція у ФП може бути досягнута за допомогою лямбда-функцій, які зберігають стан і забезпечують обмежений доступ до нього.

                Ну і звичайно автор, чий фах я стверджую пов’язаний з ФП, а, отже, безперечно з математикою також, не міг не згадати про поширений міф, що у програмуванні математика не потрібна, її вивчають в університетах для загального розвитку. З подальшою діджиталізацією світу, з накопиченням дедалі більших масивів інформації, попит на фахівців, які математичними інструментами могли б «розгребти» і «утрамбувати» цю інформацію, дедалі зростатиме. Якщо й зараз на ринку ІТ превалює більшість спеціалістів, яким не потрібна математика у роботі, то у вже досяжному майбутньому зі зростанням кількості населення планети, а отже кількості споживачів і виробників нової інформації, ця пропорція значно змінитися.

                                    II.           Serious Management Needs Serious Features

                З цього моменту автор відверто насміхається з рефакторингу об’єктно-орієнтованого коду. Теж важливою вимогою будь-якого підприємства до програміста є написання чистого та лаконічного коду, який би був зрозумілим всій команді розробників. Але ж це так довго і нудно! Краще айтівцю написати ще одну функцію без рефакторингу, наче, щоб зекономити час та зусилля, а його колеги хай там якось розбиратимуться з нею, витрачаючи свій дорогоцінний робочий час. Що ж ви думали? Час.

                ФП до рефакторингу 6 рядків коду, після – 7.

                ООП до – 9, після – 22!  

                                III.          The Fallacy of Declarative Code

                Декларативний код аж настільки лаконічний, що створює ілюзію продуктивності та й у розробників ще й часу на бізнес логіку вистачає! «Безперспективність» функціонального програмування в черговий раз викрито!

                                IV.          Functional Programming Provides no Opportunity for Growth

                Як мною було сказано вище, кількість інформації у світі лише накопичуватиметься з часом. Для її обробки будуть необхідні нові технології, алгоритми, навички програмування. Функціональне програмування насправді перебуває лише на початку свого розвитку, у нього попереду грандіозне майбутнє. Саме тому програмістам, що спеціалізуються саме на ФП завжди буде куди рости.

                Автор звернув увагу читачів на тому, що для вивчення ООП людині потрібно на багато більше часу і зусиль. Я не погоджуюся про 20-30 років, але впевнена, що для опанування всіх необхідних навичок ООП потрібно більше часу ніж для ФП. Це відбирає у майбутніх фахівців з ООП час, який би у випадку з ФП міг бути витрачений на виконання реальних проєктів, отримання досвіду і професійне зростання.

                                    V.          Success is a Journey, Not a Destination

                Автор знову дорікає ООП за спагеті-код, мутабельний стан, складність роботи з багатьма об’єктами. Насправді, чим більше програміст витрачає часу на написання коду, тим більше часу в нього йде на реалізацію проєкту, з чого випливає менша ефективність айтівця, що позначається на рентабельності компанії, на яку він працює.

                                VI.          Bug Prevention Department

                У функціональному програмуванні функції зазвичай є "чистими", тобто результат виклику функції залежить лише від її вхідних параметрів, а не від стану системи. Це полегшує тестування функцій, саме тому робить код більш передбачуваним, значно зменшуючи можливість виникнення багів. В ООП саме через мутабельність, яка непритаманна ФП, виникає безліч помилок у роботі програми. Але автор у властивій для нього у цій статті формі жартома стверджує, що через складність відлагодження вихідного об’єктно-орієнтованого коду, легше б виправлення багів покласти на плечі користувачів.

                            VII.          Bисновок

                В свою чергу я хотіла би сказати, що не існує однієї найефективнішої парадигми програмування, за допомогою якої можна було б з однаковою дієвістю виконувати будь-які поставлені задачі.  Власне, ця стаття і демонструє це. Коли, наприклад,  в аналітиці даних доречно і доцільно використовувати ФП, то в написанні ігор – ООП.

                Автор уміло зміг через недоліки об’єктно-орієнтованого підходу показати переваги функціонального, а також говорячи вустами чванливих прихильників ООП наголосити також і на його перевагах.
            </article_body>
        </content>



        <authors_image>../img/Anna_K.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Упослідження через іронічне возвеличення"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Вероніка В.</username>
                        <date>середа 27 вересня 2023</date>
                        <time>20:41 PM</time>
                        <response>
                            Спочатку я побачила неймовірний обсяг тексту, але як добре, що цікавість перемогла лінощі, адже дійшовши до пункту Vll "Висновок", була злегка розчарована. Ця емоція була викликана бажанням, щоб стаття Анни не закінчувалася!

                            Авторка - майстриня письма, вдало користується мовними засобами, а текст, хоча й не виходить за межі літературного жанру, прикрашає привабливою ноткою художності. Слова зливаються у течію, яка стрімко та упевнено прямує від гір до водоймища.

                            Цей текст передає особисте враження Анни та відповідає вже набутим знанням дівчини. Я, як людина вже ознайомлена з статтею Іллі, нібито поринаю в процес читання разом з авторкою, розумію її емоції в той чи інший момент та дивлюся через призму сприйняття Анни.

                            Єдине, що хотілося б зазначити в кінці, це прохання до авторки продовжити приймати участь в обговореннях, бо я вже з нетерпінням чекаю можливості прочитати відгук на іншу статтю.

                            Дякую, впевнено оцінюю на 10/10.
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Veronika_V.png</authors_image>
            </comment>
            

            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Упослідження через іронічне возвеличення"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Софія Л.</username>
                        <date>середа 27 вересня 2023</date>
                        <time>21:47 PM</time>
                        <response>
                            Поки що це, безперечно, найкращий відгук, який я читала на цю статтю й він тепер задасть всім нам високу планку, за перепригуванням якої буде дуже інтересно споглядати. Тут є все, починаючи від простої мови викладення та закінчуючи глубоким аналізом теми та унікальністю викладення "про що НАСПРАВДІ були аргументи автора".

                            Цей текст швидко читається, авторка зрозуміло пояснює свої роздуми та за її ходом думки дуже легко спостерігати, аж статтю не треба згадувати, щоб розуміти що вона має на увазі.

                            Що найбільш спободалось - поки інші намагались впевнити, що автор надає неправильні доводи, то Анна вказує що автор НАСПРАВДІ хотів передати своєю сатирою, та чому його доводи насправді про переваги ФП, використовуючи контекст написання статті, та історію конфлікту ООП vs ФП, для чого також потрібно немало часу на аналіз.

                            Зрозуміло, що Анна гарно ознайомлена також і з темою, коли пояснює глибше думки автора й чому його аргументи насправді були про переваги ФП.

                            Приєднуюсь до відгуку Вероніки. Дякую, Анно, що ти взяла участь у цьому обговоренні!
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Sophia_L.png</authors_image>
            </comment>
        </comments>
    </article> 


    <article category="Functional Programming? Don`t Even Bother, It`s a Silly Toy">
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"Рецензія на саркастичну оду ООП"</article_name>
                </user_article>
                <user_full_information>
                    <username>Іван Т.</username>
                    <date>cереда 27 вересня 2023</date>
                    <time>23:31 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>Рецензія на саркастичну оду ООП</topic>
            <article_body>
                Співвідношення сатири та серйозності є завжди непростим завданням, і стаття з виразною сатиричною схильністю "Functional Programming? Don’t Even Bother, It’s a Silly Toy" взагалі не вражає, як на мене. Ця стаття, здається, намагається донести до нас, що функціональне програмування - це ніщо інше, як дурна дитяча іграшка. Автор постійно використовує гострий сарказм та насмішки, намагаючись показати ФП у негативному світлі. Проте, основна проблема полягає в тому, що сатира зазвичай має підґрунтя в правді, але в цьому випадку, здається, автор вже захопився власним гумором і просто перебільшує.

                Така стратегія може вплинути на читачів негативно і спонукати їх відкинути будь-які спроби зрозуміти чи дізнатися більше про функціональне програмування, і це не найкращий підхід. Замість того, щоб створювати сприйнятливий для дискусії контент, стаття здавалася мені призначеною для шоку та сенсацій, що може лише загострити розділ в програмістській спільноті.

                Зазвичай сатира використовується для привертання уваги до певної проблеми чи теми, але в цьому випадку вона здається більше агресивною і настільки перебільшеною, що втрачає свою точку зору. Таким чином, попри всі спроби вразити або розвеселити, стаття "Functional Programming? Don’t Even Bother, It’s a Silly Toy" залишається лише пустою сміттєвою рецензією, яка несе дуже мало корисної інформації.

                Ця стаття є, мабуть, одним з наявних прикладів того, як іноді перегони за популярністю та гіперболічні висловлення можуть перевершувати зміст і суть. В добу розквіту різних підходів до програмування, дискусія щодо об'єктно-орієнтованого програмування та функціонального програмування є важливою та корисною. Проте стаття "Functional Programming? Don’t Even Bother, It’s a Silly Toy" намагається вирішити цю дискусію шляхом сатиричного перебільшення та не конструктивним спростуванням одного підходу на користь іншого.

                І хоча це смішно(не дуже), це також може призвести до однобічних поглядів та нездорової конкуренції між функціональним та об'єктно-орієнтованим програмуванням. Пов'язаність цієї статті з намаганнями оточуючих програмістів визначити "кращий" підхід може надавати їй більше тону конкуренції, ніж реальної корисності.

                Коли мова йде про обрання підходу до програмування, варто пам'ятати, що обидва об'єктно-орієнтоване та функціональне програмування мають свої місця та переваги, і зазвичай вибір залежить від конкретних потреб та завдань проєкту. Тому замість того, щоб змагатися в тому, яка парадигма краща, краще зосередитися на тому, як вони можуть доповнювати один одного та використовувати обидві для досягнення кращих результатів в розробці програмного забезпечення.

                P.S. Незважаючи, на те, що я в першу ж хвилину читання побачив сатиру, мені не було взагалі цікаво читати цю статтю, бо це або не цікаво новачкам ФП або я просто не розумію нащо створювати ці недолугі статті з сатирою. Звісно ж, впливає те, що я не маю великих знань з ФП і ні один факт який наводив автор статті я не міг, для себе, ні підтвердити, ні заперечити, тож напевно варто буде її перечитати в кінці курсі з дисципліни ФП.
            </article_body>
        </content>



        <authors_image>../img/Ivan_T.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Рецензія на саркастичну оду ООП"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Кирило К.</username>
                        <date>середа 27 вересня 2023</date>
                        <time>23:36 PM</time>
                        <response>
                            З самого початку Іван привертає увагу своєю незвичною і виразною формою викладу думок. Саме така непересічна сміливість висловлювати свою позицію в такому відвертому стилі робить його роботи особливими і відмінними від інших. Сатиричний підхід, який Іван використовує в своїй рецензії, є виразом його творчої унікальності, і я вірю, що ця рецензія стане джерелом багатьох цікавих дискусій у програмістській спільноті.

                            Хоча деякі можуть погодитися або не погодитися з думками, висловленими в рецензії, не можна заперечити того, що Іван зумів привернути увагу читачів, викликавши їх до рефлексії. Це підкреслює його майстерність як автора.

                            Іване, дякую тобі за цю рецензію! Це було освіжаюче та провокуюче чтиво, яке надихає думати та дискутувати. Так тримати!
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Kyrylo_K.png</authors_image>
            </comment>
            

            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Рецензія на саркастичну оду ООП"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Іван Т.</username>
                        <date>середа 27 вересня 2023</date>
                        <time>23:37 PM</time>
                        <response>
                            Приємно, що мої старання не пройшли повз твою увагу!
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Ivan_T.png</authors_image>
            </comment>
        </comments>
    </article> 


    <article category="The Difference Between Currying and Partially Applied Functions">
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"ФУНКЦІОНАЛЬНИЙ ЛАБІРИНТ: проведення крізь Каррінг та Частково застосовані функції"</article_name>
                </user_article>
                <user_full_information>
                    <username>Яна Г.</username>
                    <date>неділя 29 жовтня 2023</date>
                    <time>19:46 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>ФУНКЦІОНАЛЬНИЙ ЛАБІРИНТ: проведення крізь Каррінг та Частково застосовані функції</topic>
            <article_body>
                    Привіт, читачі!)
                    Майже щойно прочитала одну досить цікаву та відносно свіжу  статейку 20-го року випуску — “The Difference Between Currying and Partially Applied Functions” авторства нашого києвлянина Олексія Зволінського. Та зараз почну уважно укладати кожне слово, розставляючи усі крапки над 'і'.

                    На сам перед, загальновідома (мабуть) інформація: у світі функціонального програмування існують концепції, які можуть здатися важкими для розуміння, особливо для початківців. Та і отже одна з таких концепцій — різниця між каррінгом та частково застосованими функціями. Ці дві техніки дозволяють розробникам працювати з функціями більш ефективно, але вони відрізняються за своєю сутністю і застосуванням.

                    Ось currying — це техніка, що дозволяє нам декомпозувати функції з декількома аргументами в “ланцюжок” функцій з одним аргументом. Це забезпечує гнучкість та можливість використовувати функції з меншою кількістю аргументів у порівнянні з їхніми повними версіями. Наведу приклад: у SCALA ми можемо використовувати currying для перетворення функції з двома аргументами у послідовність функцій з одним аргументом. І ця “фіча” (умновно кажучи) дозволяє нам створювати більш гнучкі та виразні функції, а також, немаловажливо, покращує читабельність коду.

                    А partially applied functions — це також техніка, але дозволяє передавати у функцію меншу кількість аргументів, ніж вона має в оголошенні. SCALA дозволяє нам використовувати частково застосовані функції для створення нових функцій на основі вже існуючих. Це особливо корисно, коли нам потрібно зафіксувати певні параметри функції і використовувати їх у подальших викликах. Наприклад, якщо нам потрібно перевірити, чи число знаходиться в певному діапазоні, ми можемо застосувати часткове застосування до функції isinrange (як у прикладах коду від Олексія), фіксуючи один з аргументів.


                    Також, guys, я зібрала до купи усі “пунктики” критичної оцінки статей. Ось що в мене вийшло:

                    Стаття зрозуміло пояснює концепції каррінгу та часткового застосування функцій в SCALA. Автор надає приклади та наводить визначення. Це допомагає читачам засвоїти складні концепції каррінгу та часткового застосування функцій. Автор, безумовно, має свої власні переконання або досвід, який вплинув на його спосіб представлення матеріалу Це може відображати його упередження, але також може надати цінний погляд на тему. (чому я маю бачення того, що автор має уявлення — на сайті, де опублікована стаття, Олексій має досить непоганий рейтинг та ще не один написанний текст, що мають загалом біля 700 тисяч переглядів).

                    Але, любі читачі, важливо усвідомлювати, що жодна інформація не є абсолютно об'єктивною. Знання кожного завжди мають певний ступінь суб'єктивності та упередженості. У цілому, стаття про каррінг та частково застосовані функції в SCALA має значуще значення для тих, хто вивчає ці технікі програмування. Але важливо завжди залишатися критичним та активно аналізувати інформацію, яку ми сприймаємо. Вірити можна усьому, але завжди треба перевіряти інформацію самому (шкода, що автор не надав жодних посилань на зовнішні ресурси, щоб читачі його статті мали можливість якось зрівнювати з чимось. Я так продивилась його сторінку, та помітила, що Олексій не дуже й і полюбляє такі умовні “списки літератури”).

                    Хотіла б додати трохи інформації щодо застосування у реальному світі. Виділила один з найяскравіших прикладів застосування — в галузі розробки веб-додатків та API. У веб-розробці, коли різні компоненти додатків можуть взаємодіяти з великою кількістю параметрів, використання каррінгу може спростити обробку запитів. Наприклад, якщо маємо велику систему фільтрації товарів у магазині, можна використовувати каррінг для створення послідовності функцій фільтрації, які можуть застосовуватися до товарів з різних категорій або за різними параметрами.

                    Щодо частково застосованих функцій, давайте уявимо велику систему управління користувачами, де адміністратор може змінювати різні атрибути користувачів, такі як ім'я, електронна пошта, дата народження тощо. Використання частково застосованих функцій може дозволити створювати нові функції для оновлення користувачів, фіксуючи певні аргументи, наприклад, ідентифікатор користувача, і створюючи функції для зміни конкретних атрибутів.

                    Загалом, для студентів і молодих розробників вивчення цих концепцій є ключовим етапом у їхньому розвитку як програмістів. Розуміння функціонального програмування та його базових понять, таких як в цій статті — каррінг та частково застосовані функції, стає важливим підґрунтям для подальшого вивчення більш складних концепцій та мов програмування. При цьому, вивчення цих технік розширює кругозір програміста та дає йому можливість досліджувати нові шляхи в розробці програмного забезпечення.

                    Останнє, що варто підкреслити, — навички, отримані вивченням каррінгу та частково застосованих функцій, стають корисними не лише в програмуванні. Вони також розвивають абстрактне мислення, логічні навички та здатність до аналізу, які можуть бути застосовані в різних сферах життя.

                    На кінець, важливо розуміти, що каррінг та частково застосовані функції — це не є одне й те саме. Підсумую: каррінг дозволяє нам створювати послідовність функцій з одним аргументом з функції, яка приймає багато аргументів; коли частково застосовані функції дозволяють нам зафіксувати певні аргументи і створити нові функції на основі вже існуючих. Загалом, ці техніки роблять код більш зрозумілим, гнучким та лаконічним, сприяючи покращенню продуктивності та якості програмного забезпечення. Вивчення та використання цих концепцій допоможе розробникам вдосконалити свої навички функціонального програмування та зробити їхні програми більш ефективними і зрозумілими для інших розробників.

            
                    Я б хотіла ще поділитися декількома посиланнями на зовнішні ресурси щодо загальної теми для наочності:

                    — Scala Documentation: Currying: це офіційна документація SCALA, яка пояснює, що таке каррірювання, як його використовувати та які переваги воно дає;

                    — Scala Tutorial: Partially AppliedFunctions:це практичний посібник, який показує, як створювати та використовувати частково застосовані функції в SCALA з прикладами коду;

                    —Currying vs Partial Application inScala:це стаття, яка порівнює каррірювання та часткове застосування функцій в SCALA та розбирає їхні схожості та відмінності.


                    P.S. Закликаю не вірити в гучні заголовки і намагатися у всьому розібратися самим. А що як ніхто зі звичайних людей не підійшов до правильної відповіді і все куди цікавіше...?)
            </article_body>
        </content>



        <authors_image>../img/Yana_H.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"ФУНКЦІОНАЛЬНИЙ ЛАБІРИНТ: проведення крізь Каррінг та Частково застосовані функції"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Віктор П.</username>
                        <date>неділя 29 жовтня 2023</date>
                        <time>20:18 PM</time>
                        <response>
                                Привіт, Яночка, знов)

                                Дорога Яночка, навіть враховуючи те, що мною вже була прочитана дана стаття, ви всеодно змогли привернути мою увагу до неї. Я б хотів висловити свій враження та підтримати твій позитивний погляд на цей матеріал.

                                Спочатку, стаття прекрасно пояснює концепції каррінгу та часткового застосування функцій в мові програмування SCALA, ви дійсно праві. Вона надає чіткі приклади та визначення, що допомагає читачам легше зрозуміти ці складні концепції. Олексій Зволінський здатний гарно розгортати тему і демонструвати своє глибоке розуміння цих технік програмування.

                                Додатково, ти правильно зауважуєш, що навіть інформація, яка подається в статті, завжди має певний ступінь суб'єктивності, але, все-ж, звертаєш увагу на досвід та авторитет Олексія в цій галузі. Це дає нам впевненість в якості і достовірності наданої інформації.

                                Також, мені дуже сподобалось, що ти ділишся своїми власними враженнями щодо застосування цих концепцій у реальному світі, зокрема в розробці веб-додатків та систем управління користувачами. Це надає більше уявлення, як ці техніки можуть бути використані в практичних задачах і як вони можуть полегшити життя розробників.

                                Звісно ж, не можу не виділити твій аналіз статті зі сторони критичної оцінки, який є дуже важливим елементом кожного обговорення. Автор статті, Олексій Зволінський, надав цінну інформацію про каррінг та частково застосовані функції в SCALA, але твій підхід до аналізу допомагає читачам стати більш критичними та аналітичними.

                                Ти не обмежуєшся лише загальним позитивним відгуком, а намагаєшся підкреслити не тільки переваги, але й можливі недоліки. Важливо розуміти, що навіть корисна інформація може мати свої обмеження або не враховувати всі аспекти питання, тому критичний погляд і судження є важливою частиною будь-якого обговорення.

                                Нарешті, ти правильно підкреслюєш, що вивчення каррінгу та частково застосованих функцій є важливим для студентів і молодих розробників, які розвивають свої навички програмування. Ці концепції не тільки полегшують роботу з кодом, але й розвивають критичне мислення та логічні навички, які можна використовувати в різних сферах життя.

                                Враховуючи усе вищесказане мною, твій коментар до статті Олексія Зволінського є дуже інформативним та сприяє розумінню важливості вивчення цих концепцій в програмуванні та й загалом він є дуже приємним до читання. Також, дякую за поділ посилань на зовнішні ресурси, які допомагають ще глибше розібратися в темі.
                                Продовжуй у тому ж дусі)
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Victor_P.png</authors_image>
            </comment>
            

            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"ФУНКЦІОНАЛЬНИЙ ЛАБІРИНТ: проведення крізь Каррінг та Частково застосовані функції"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Яна Г.</username>
                        <date>неділя 29 жовтня 2023</date>
                        <time>20:27 PM</time>
                        <response>
                                Дякую за такий цінний для мене коментар та дякую за мотивацію продовжувати, Вітюша) 
                                Я буду намагатися лише підвищувати свою планку в подальших обговореннях. Разом до найвищих висот, так)
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Yana_H.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"ФУНКЦІОНАЛЬНИЙ ЛАБІРИНТ: проведення крізь Каррінг та Частково застосовані функції"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Володимир В.</username>
                        <date>середа 1 листопада 2023</date>
                        <time>22:59 PM</time>
                        <response>
                            Яно, я хотів би висловити свою думку щодо цієї рецензії та статті "The Difference Between Currying and Partially Applied Functions".
                            Спершу, дякую за детальний та об'єктивний аналіз. Я погоджуюся з багатьма з твоїх висновків стосовно статті. Важливо, що стаття надає чіткі визначення та практичні приклади для допомоги читачам зрозуміти складні концепції каррінгу та часткового застосування функцій в мові Scala.
                            Також, твоя зазначена важливість критичного мислення та самостійної перевірки інформації цілком обґрунтована. Це завжди важливо, коли ми читаємо будь-яку інформацію, і відсутність посилань на джерела може справді ускладнити перевірку.
                            Твоя додаткова інформація щодо застосування цих концепцій у реальних проектах також дуже цінна. Вона допомагає довести, що вивчення каррінгу та часткового застосування функцій має практичне застосування та корисність у справжньому програмуванні.
                            Загалом, твоя рецензія надає іншим читачам цінний вигляд на статтю та підкреслює її важливість для програмістів, особливо початківців. Дякую за твій аналіз та спільний розгляд цієї статті.
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Volodymyr_V.png</authors_image>
            </comment>



            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"ФУНКЦІОНАЛЬНИЙ ЛАБІРИНТ: проведення крізь Каррінг та Частково застосовані функції"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Софія Л.</username>
                        <date>четвер 2 листопада 2023</date>
                        <time>13:22 PM</time>
                        <response>
                                Яно, ви не тільки зробили глибокий аналіз статті, застосовуючи знання у сфері ФП та вміння критично оцінювати матеріал, а й природною мовою розповіли у яких галузях розглядувані концепції можна використовувати та чому вони там будуть в нагоді. Я б оцінила цей відгук як добре структурований і інформативний.

                                Ще Яна наводить цікаві думки у своєму критичному аналізі, з якими я дуже погоджуюсь: зазначає, що хоча стаття надає корисну інформацію, вона може містити суб'єктивність, і важливо підходити до інформації з критичним мисленням; вказує на відсутність зовнішніх посилань у статті, які могли б допомогти читачам забезпечити додатковий контекст. Це важливий аспект критичного аналізу, оскільки він дозволяє читачам розширити свої знання та забезпечує більшу прозорість авторських джерел.

                                Мені сподобалось як вона зазнача, що навички, отримані вивченням каррінгу та частково застосованих функцій, стають корисними не лише в програмуванні, а й для розвивання абстрактного мислення. Згадка про реальне застосування каррінгу та частково застосованих функцій у веб-розробці та управлінні користувачами є особливо корисною, оскільки вона показує практичне значення цих концепцій за межами теоретичного контексту.

                                Якщо б я мала можливість редагувати цей відгук, то зазначила б, що:
                                стаття насправді написана 2017-го року;
                                я сказала б, що каррінг та часоково застосовані функції є концепціями ФП, а не сама різниця між ними є концепцією;
                                коли сказано про те, що каррінг дозволяє створювати більш гнучкі та виразні функції, а також, покращує читабельність коду, то ми залишаємось без пояснень чому це так й маємо на руках лише абстрактні поняття, які можуть змінюватись залежно від ситуації: застосування каррингу може призвести до створення додаткових проміжних функцій, що може мати вплив на читабельність та продуктивність, особливо в мовах, які не оптимізовані для каррингу.

                                Нарешті, коментатор надає корисні зовнішні ресурси, які можуть служити додатковими джерелами для тих, хто хоче поглибити свої знання. Це демонструє бажання поділитися знаннями та сприяти навчанню інших, що є цінним у будь-якому навчальному дискурсі.

                                Загалом, відгук є добре структурованим та аргументованим, відображає глибоке розуміння функціонального програмування та важливість критичного мислення. Яна надає чітке розуміння теми, висвітлюючи ключові аспекти каррінгу та частково застосованих функцій, та їхнє застосування в реальному світі, комбінуючи з цим критичний аналіз статті. Дякую, Яно, за регулярну участь у форумі!
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Sophia_L.png</authors_image>
            </comment>



            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"ФУНКЦІОНАЛЬНИЙ ЛАБІРИНТ: проведення крізь Каррінг та Частково застосовані функції"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Вероніка В.</username>
                        <date>пʼятниця 3 листопада 2023</date>
                        <time>12:21 PM</time>
                        <response>
                                
                            Дорога Яно, дякую за даний детальний аналіз статті)

                            Почати свій відгук хочу з одного спостереження: твій зріст, як автора просто вражає. Якщо на початку я читала твої есе та лишала без коментаря з різних причин, перша й головна з яких - надто великий матеріал всередині якого виникає розфокус уваги, то сьогодні текст виявився жвавим, захоплюючим, що, чесно кажучи, перечитувала декілька разів. Це дуже круто, що вже з третього разу такий неймовірний результат (боюся уявити, що буде під шостою статтею, ха-ха). Бажаю тобі не кидати цю справу та вдосконалювати свої навички критичного мислення все більше і більше!

                            Добре, зараз повернемося до аналізу викладеного матеріалу.
                            Зі стилю написання видно, що авторка плідно попрацювала над матеріалом: я вперше читала цей відгук, ще до переходу за посиланням на контент Олексія, але вже змогла сформувати загальне уявлення про дві техніки функціонального програмування. Єдине, чого мені не вистачило - прикладів коду. Це було б дуже корисно та сприяло б можливості існування даної роботи як самостійного матеріалу.

                            Однак, Яно, мені однозначно сподобались приклади застосування в житті. Такі відсилання, на мій погляд, роблять твою роботу свіжішою та дають читачу певне розуміння нащо ті currying та часткове застосування реально потрібно у "відчутному" просторі, а не просто при написанні якоїсь програмуліни.

                            Яна вдало взаємодіє з аудиторією, аргументовано пояснивши, чому в цьому світі завжди (!) треба залишатися критичним та будь-який корисний (чи не дуже) матеріал аналізувати, а не сприймати на віру.

                            Ще момент, який сподобався - стислий висновок про що взагалі йшлася мова. Такий підхід не дає читачеві загубитися та підсумовує все вище сказане підкреслюючи найважливіше. (summarizing, на мою думку, допомагає також і автору).

                            Останній момент це авжеж корисні посилання. Я вже встигла випробувати їх на ділі під час написання власного відгуку. Матеріал наведений у списку джерел є змістовним, а особисті коментарі - доречні, не треба переходити за кожним посиланням, щоб зрозуміти про що йде мова та чи потрібна мені ця інформація ще до відкриття джерела.

                            Насамкінець, хочу ще раз висловити свою вдячність. Яно, ніколи не здавайся, я щиро вірю та знаю, що в тебе все вийде! А далі - більше)
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Veronika_V.png</authors_image>
            </comment>

        </comments>
    </article> 


    <article category="The Difference Between Currying and Partially Applied Functions">
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"Таємниці Функцій у Scala Розкриті: Критичний Аналіз Currying`у та Partially Applied Функцій"</article_name>
                </user_article>
                <user_full_information>
                    <username>Іван Т.</username>
                    <date>пʼятниця 27 жовтня 2023</date>
                    <time>17:49 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>Таємниці Функцій у Scala Розкриті: Критичний Аналіз Currying`у та Partially Applied Функцій</topic>
            <article_body>
                Стаття спрямована на роз'яснення часто незрозумілих концепцій Curried та Partially Applied функцій в Scala, особливо для розробників, які тільки починають вивчати функціональне програмування. Автор визнає початкове непорозуміння цих концепцій та прагне надати ясність, пропонуючи визначення, приклади та практичні висновки. Можу сказати, що у нього не погано вийшло у порівнянні з іншими туторами(не прихильник перекладу термінів, але тутор є тутор). У цій рецензії я проведу дещо критичний аналіз змісту, ясності та навчальної цінності статті, а також запропоную більш адаптованіші тутори, де це необхідно.

                Отож, стаття розпочинається короткими визначеннями Currying`у та Partially Applied. Визначення є ясними та добре структурованими, що полегшує їх засвоєння читачами, тим паче новачками.

                Currying:
                Стаття включає ілюстративний приклад куріння, де показано, як функцію з багатьма аргументами можна перетворити на ланцюг одноаргументних функцій. Кодові вставки добре пояснюються, з коментарями для керівництва читачами через кожен крок. Цей практичний приклад допомагає розкрити тему куріння для тих, хто ще не ознайомився з нею.

                Використання "curried" як методу згадується коротко, що може призвести до недорозумінь серед читачів. Додавання трохи більшої пояснення про те, як працює цей метод, було б корисним. Тому пропоную чудовий тутор від форуму GeeksForGeeks.

                Partially Applied:
                Стаття продовжується прикладами Partially Applied функцій, використовуючи ту ж функцію "isinrange". Приклади ефективно показують, як можна створювати нові функції, надаючи менше аргументів, ніж очікує оригінальна функція. Також використання підкреслень (_) чітко пояснюється. Однак може бути більше явного пояснення того, чому часткове застосування корисне і як воно допомагає розробникам. Свого еталону не знайшов, але якщо пошукати за запитом "приклади Partially Applied функцій у Scala", то точно знайдете, що вам потрібно;)

                Ясність та Структура:
                Стаття добре структурована, з чіткими заголовками і підзаголовками, що сприяє зрозумінню читачів. Кодові вставки оформлені аккуратно і супроводжуються поясненнями, що допомагає легко відслідковувати розгортання прикладів.

                Навчальна Цінність:
                Об'єкт рецензування успішно розкриває різницю між курінням та частково застосованими функціями. Вона призначена як для початківців, так і для досвідчених розробників Scala, які можуть мати неправильне розуміння цих концепцій. Приклади практичні та пізнавальні, надаючи читачам можливість самостійно вивчити, як використовувати куріння та часткове застосування в Scala, але все ж таки варто подивитись і чудово статтю на GeeksForGeeks, якщо ще ні.

                Критичний Аналіз:
                Незважаючи на те, що стаття загалом добре структурована і інформативна, є кілька моментів, які можна покращити:

                1. Глибина Пояснення: Стаття могла б надати більше глибини в поясненні практичних застосувань та переваг Currying`у та Partially Applied. Наприклад, вона могла б розглянути сценарії, де ці техніки особливо корисні.

                2. Реальні сценарії використання: включення реальних сценаріїв або ситуацій, де куріння та часткове застосування дійсно сяють, зробило б концепції ще більш доступними розробникам. Це схоже на тутори по патернам, коли зі статті в статтю перетікає один і той самий матеріал, але дійсно цінна інформація лише у коментарях профі.

                3. Уточнення: Використання терміну "curried" як методу можна було б більше уточнити для читачів, які можуть не бути знайомі з цим синтаксисом.

                Отже,
                у висновку, стаття виконує свою мету - роз'яснення різниці між Curried та Partially Applied функціями в Scala. Вона особливо корисна для розробників, які тільки починають вивчати функціональне програмування. Зміст є ясним, а практичні приклади допомагають зрозуміти, що це, але як на мене малувато саме цінних практичних порад по застосування. Додавання реальних сценаріїв використання та більшого пояснення може зробити статтю ще кориснішою для розробників.
            </article_body>
        </content>



        <authors_image>../img/Ivan_T.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Таємниці Функцій у Scala Розкриті: Критичний Аналіз Currying`у та Partially Applied Функцій"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Іван Т.</username>
                        <date>пʼятниця 27 жовтня 2023</date>
                        <time>22:14 PM</time>
                        <response>
                            Тут мені декілька разів було повідомлено про помилку перекладача: "Currying переклалось, як куріння" . Я хочу вибачитись за свою неуважність під час автоматичного перекладу своєї статті, яку в оригіналі писав англійською. Мабуть у наступний раз писатиму одразу українською або варто просто перечитувати автоматичний переклад) Ще раз прошу вибачення перед читачами!
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Ivan_T.png</authors_image>
            </comment>
            

            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Таємниці Функцій у Scala Розкриті: Критичний Аналіз Currying`у та Partially Applied Функцій"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Вероніка В.</username>
                        <date>субота 28 жовтня 2023</date>
                        <time>17:04 PM</time>
                        <response>
                            Іване, було б цікаво почитати вашу статтю в оригіналі - англійською)
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Veronika_V.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Таємниці Функцій у Scala Розкриті: Критичний Аналіз Currying`у та Partially Applied Функцій"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Анна К.</username>
                        <date>субота 28 жовтня 2023</date>
                        <time>03:49 AM</time>
                        <response>
                            Не можу не погодитися з критикою Івана щодо недостатньої кількості прикладів застосування двох технік у реальному світі. Я вважаю, що початківцям у програмуванні необхідно обов'язково надавати на прикладах розуміння важливості різноманітних технік і окреслювати межі їхнього застосування, таким чином можна закріпити знання, а також привернути увагу студентів. Проте незгодна з твердженням, що використання "curried" як методу згадується коротко, адже про нього сказано навіть більше ніж про "partially applied functions". Також мені сподобалося, що автор коментаря до статті надав посилання на альтернативне пояснення каррингу.
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Anna_K.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Таємниці Функцій у Scala Розкриті: Критичний Аналіз Currying`у та Partially Applied Функцій"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Кирило К.</username>
                        <date>понеділок 30 жовтня 2023</date>
                        <time>16:03 PM</time>
                        <response>
                            Дорогий Іване,

                            Ваша стаття відмінно роз'яснює концепції Currying та Partially Applied Functions у Scala. Ось декілька ключових моментів:

                            Ясність Пояснень: Ви змогли чітко висвітлити складні концепції, що полегшує засвоєння матеріалу читачами.
                            Приклади Коду: Практичні приклади допомагають читачам краще зрозуміти, як ці концепції застосовуються.
                            Структура Статті: Ваша стаття добре організована і легка для навігації.
                            Області для покращення:

                            Реальні Сценарії: Додаткові реальні сценарії використання могли б допомогти читачам краще зрозуміти практичну користь від обговорюваних концепцій.
                            Додаткові Ресурси: Рекомендації щодо додаткових ресурсів для вивчення могли б бути корисними.
                            Загалом, ви зробили чудову роботу, роз'яснивши ці ключові концепції функціонального програмування у Scala. Дякую за вашу рецензію! 💜
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Kyrylo_K.png</authors_image>
            </comment>
        </comments>
    </article> 


    <article category="An Introduction to the basic principles of Functional Programming">
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"Мої враження після прочитання статті «An Introduction to the basic principles of Functional Programming»"</article_name>
                </user_article>
                <user_full_information>
                    <username>Анна К.</username>
                    <date>вівторок 17 жовтня 2023</date>
                    <time>18:17 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>Мої враження після прочитання статті «An Introduction to the basic principles of Functional Programming»</topic>
            <article_body>
                Попри відсутні зразки коду на сторінці, автору вдалося простою мовою описати концепції функціонального програмування, що є насущними для написання грамотного, легкого у розумінні та тестуванні коду. Насамперед, хочу поділитися враженнями від прочитання цієї статті. Я тішуся з того, що мені потрапила до прочитання ця стаття, оскільки вона дала мені розуміння ключових відмінностей ФП від ООП, підштовхнула мене до усвідомлення того, наскільки функціональне програмування суттєво відрізняється від імперативного і як багато мені ще треба виконати роботи над собою, щоб стати «програмістським амбідекстром» і на рівні з імперативним так само добре володіти функціональним підходом.

                Зі слів автора та прочитання статті  видно, що творець цього путівника у світ функціонального програмування дійсно вміє робити вдалі порівняння двох підходів, оскільки має досвід роботи з кожним. Особливо хотілось би поділитися тими моментами, які й були причиною мого переосмислення ФП і, щиро кажучи, дійсно мене вразили.

                Чисті функції

                Насправді мене дивують чисті функції тим фактом, що в них потрібно вносити всі аргументи, що братимуть участь у розрахунку вихідного значення. Програмуючи мовами імперативного програмування, раніше я писала функції, які б приймали мінімум параметрів і не турбували користувача постійним внесенням купи даних. Проте на прикладі сталої PI автору вдалося наочно продемонструвати альтернативний підхід імперативному і загострити мою увагу на тому, наскільки важливо свідомо підходити до кожного переданого у функцію аргументу.

                Відносна прозорість чистих функцій та мемоїзація

                Знову ж таки, маючи справу лише з імперативним підходом, я не уявляла, що можна підвищити ефективність роботи машини мемоїзацією виведених даних чистими функціями. Ця технологія розширила мій кругозір і доповнила мою стратегію вирішення різноамнітних алгоритмічних задач.

                Функції як першокласні сутності та функції вищого порядку

                Здатність функцій у ФП бути як параметрами так і виведеними даними відкриває шлях до декомпозиції функцій і композиції їх у функції вищого порядку, що в свою чергу призводить до модульного вигляду коду, зменшення витрат часу на пошук і виправлення помилок, що проявляються під час тестування. Такі властивості надають відмінний підхід для реалзіації функцій від того, що я вже знаю.

                Також важливим є висловлення критики, що до цієї статті. Так як, на мою думку, стаття мала навчальний характер, і автор не ділився своїм ставленням до тих чи інших явищ у ФП та ООП, мені не вистачило явного проговорення недоліків чистих функцій. По-перше, це збільшені витрати пам’яті, оскільки функція не змінює стан зовнішнього об’єкту, вона має створювати новий, що при частому виклику цієї функції може займати багато пам’яті. По-друге це витрати часу на створення нових об’єктів. По-третє, це час на «збирання сміття». Всі ці недоліки легко компенсуються швидким тестуванням, передбачуваністю та відсутністю побічних ефектів, але, як на мене, у статті інформативного характеру ці недоліки мали бути вказані.

                Також я б хотіла побачити у цій статті наголошення на тому, що чисті функції це не панацея, адже як наголосив автор, для взаємодії з зовнішніми ресурсами не існує жодної чистої функції, оскільки зовнішні ресурси, такі як дані файлу, можуть змінюватися. В таких випадках, функціональний підхід дозволяє декомпозувати функцію на декілька, таким чином ізолюючи чисті функції від тих, що можуть надавати неоднозначний вивід, що знову ж таки полегшує пошук і виправлення помилок.

                Наприкінці хочу сказати, що стаття, попри відсутність коду, буде корисною для прочитання усім початківцям у функціональному програмуванні, оскільки вона надає розуміння базових у ФП речей, а також написана приємною мовою, гарно структурована, має цікаві порівняння для кращого усвідомлення.

                Дякую за Ваш витрачений час на прочитання мого вігуку!
            </article_body>
        </content>



        <authors_image>../img/Anna_K.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Мої враження після прочитання статті «An Introduction to the basic principles of Functional Programming»"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Кирило К.</username>
                        <date>вівторок 17 жовтня 2023</date>
                        <time>18:53 PM</time>
                        <response>
                                Після прочитання рецензії на цю статтю, я хочу висловити свою щиру подяку та захоплення рецензором. Її детальний аналіз, глибоке розуміння теми та здатність передати свої думки так, що вони стають зрозумілими для інших, дійсно вразили мене.

                                Її підхід до аналізу, здатність виділити ключові моменти та донести до читача їх сутність заслуговує на велике захоплення. Рецензія не просто дала мені змогу поглибити свої знання про функціональне програмування, але й показала, як важливо мати глибоке розуміння матеріалу, щоб ділитися ним з іншими.

                                Анна не просто прочитала статтю, вона дійсно "прожила" її, відчув всі її нюанси та передав свої думки так, що стає зрозуміло для широкої аудиторії. Це справжній талант!

                                Хочу подякувати Ані за її роботу та за її внесок у розвиток спільноти. Сподіваюся на більше таких якісних рецензій у майбутньому!

                                Дякую за ваш професіоналізм та відданість справі! 😘
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Kyrylo_K.png</authors_image>
            </comment>
            

            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Мої враження після прочитання статті «An Introduction to the basic principles of Functional Programming»"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Вероніка В.</username>
                        <date>середа 18 жовтня 2023</date>
                        <time>00:26 AM</time>
                        <response>
                            Дана рецензія є чудовим прикладом детальної роботи з отриманою інформацією.
                            Проаналізовано кожний фрагмент статті та оздоблено власним враженням/ставленням.

                            Однозначно погоджуюсь з вами, Анна, щодо користі статті «An Introduction to the basic principles of Functional Programming» навіть для новачків. Я також підтримую думку про достатню інформативність попри відсутність коду. Це було досягнуто структурованою подачею матеріалу, що було відмічено і в моєму відгуку.

                            Дякую за витрачений час, ваш відгук допомогає більш детально проаналізувати отриману вже інформацію та є корисним як для мене, так і для наших колег!
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Veronika_V.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Мої враження після прочитання статті «An Introduction to the basic principles of Functional Programming»"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Софія Л.</username>
                        <date>четвер 19 жовтня 2023</date>
                        <time>14:43 PM</time>
                        <response>
                            Дякую за відгук на статтю "An Introduction to the basic principles of Functional Programming". Прочитавши його, я хочу висловити своє захоплення: завдяки Анні я отримала нову точку зору на деякі аспекти.

                            Про враження від чистих функцій я вас розумію, хоча саме там я не погоджувалась: сам приклад не вважаю наочним через кількість можливих питань(коли це в нас константа Pi зміниться? Навіщо константу передавати параметром, а не робити щось простіше? Заради чого ми робимо цей код складнішим, коли на початку наводимо цитату, що "Complexity is anything that makes software hard to understand or to modify"?)

                            Але згодна, що стаття надає цікаві та практичні знання, які потім можна використовувати. Мені дуже приємно читати, що Анна передбачає, де можна застосовувати інформацію, яку вона дізнається: та ж мемоізація, яку я вже мала змогу використовувати для алгоритмних задач.

                            Я абсолютно згодна щодо функцій як першокласних сутностей! Ця концепція теж змінила мій підхід до декомпозиції функцій і композиції їх у функції вищого порядку, допомагаючи мені писати більш модульно.

                            Також вважаю, що якщо публікація каже нам про переваги чистих функцій, то треба ще й казати недоліки та чому вони(чисті функції) не панацея, але помітила це тільки після того як прочитала відгук Анни. На мою думку, розуміння обох сторін кожної парадигми або підходу є ключем до глибшого розуміння теми й Анна цим дуже гарно володіє.

                            Завершуючи, хочу сказати, що цей коментар – прекрасний приклад того, як студентка може детально і критично аналізувати матеріал, вказуючи на його переваги та недоліки. Це свідчить про високий рівень розуміння та зацікавленість у темі.
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Sophia_L.png</authors_image>
            </comment>

        </comments>
    </article> 


    <article category="An Introduction to the basic principles of Functional Programming">
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування"</article_name>
                </user_article>
                <user_full_information>
                    <username>Кирило К.</username>
                    <date>пʼятниця 6 жовтня 2023</date>
                    <time>20:36 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування</topic>
            <article_body>
                Всім моїм читачам передаю привіт! У статті "An Introduction to the basic principles of Functional Programming" автор пропонує глибоке занурення у складний світ функціонального програмування (ФП). Ретельно розбиваючи основні принципи цієї парадигми, він надає дорожню карту для розуміння сильних сторін та викликів ФП, позиціонуючи його в ширшому ландшафті методологій програмування.

                    В основі статті лежить центральна філософія ФП: трактування обчислень як оцінки математичних функцій, позбавлених мінливого стану і змінних даних. Основоположні принципи ФП:


                    Незмінність: У світі ФП, як тільки дані набувають форми, вони залишаються незмінними. Ця фундаментальна відмінність від багатьох інших парадигм програмування робить програми більш передбачуваними, полегшує налагодження та надає переваги у багатопотоковому та паралельному середовищах.


                    Невизначеність: Функції у ФП розроблені так, щоб бути чистими. Ця чистота гарантує, що вони позбавлені побічних ефектів, покладаючись виключно на вхідні аргументи для отримання результату. Дотримуючись цього принципу, код стає більш прозорим, зменшуючи ймовірність неочікуваної поведінки та покращуючи зручність супроводу.


                    Першокласні функції: Характерною рисою ФП мов є піднесення функцій до рівня першокласних. Це означає, що їх можна присвоювати змінним, передавати як аргументи і навіть повертати з інших функцій. Така можливість прокладає шлях до потужних програмних конструкцій, таких як функції вищого порядку, що призводить до більш модульного та виразного коду.


                    Рекурсія над ітераціями: Оскільки ФП зазвичай уникає традиційних конструкцій циклів, рекурсія стає основним засобом повторення. Рекурсивні функції викликають самі себе зі зміненими аргументами, доки не буде виконано базову умову.


                    Автор не ухиляється від розгляду проблем, пов'язаних з ФП. У статті підкреслюється, що навчання може бути дуже складним, особливо для тих, хто звик до імперативних парадигм програмування. Також обговорюються потенційні накладні витрати на продуктивність, особливо при розгляді глибокої рекурсії та частого створення нових об'єктів через наполягання на незмінності.

                    Стаття виділяється як добре написана робота, що систематично деконструює принципи ФП. Вона досягає балансу між з'ясуванням переваг парадигми і висвітленням сфер, які можуть становити виклик для новачків. Чітка мова і структурований виклад роблять його доступним як для новачків, так і для тих, хто має фундаментальне розуміння ФП.

                    З чим я згоден:


                    Незмінність: Наголос у статті на незмінності як наріжному камені ПМ резонує зі мною. Її переваги, особливо у забезпеченні передбачуваності коду та полегшенні паралельного програмування, незаперечні.


                    Без статусність: Я повністю згоден з акцентом на без статусних функціях і перевагах, які вони приносять з точки зору зрозумілості коду і зручності супроводу.


                    Першокласні функції: У статті висвітлено роль і переваги першокласних функцій у ФП, що підкреслює їхню важливість у створенні виразного коду.

                    Розбіжності:


                    Крива навчання ФП: Я вважаю, що твердження про стрімку криву навчання ФП дещо перебільшене. Хоча він і вимагає зміни мислення, за наявності відповідних ресурсів ця парадигма може бути такою ж доступною, як і будь-яка інша.


                    Проблеми продуктивності: Позиція автора щодо накладних витрат на продуктивність, особливо щодо рекурсії та незмінності, може не повністю охоплювати оптимізації, які пропонують сучасні компілятори.


                    Застосовність: Я вважаю, що обережна позиція статті щодо застосовності ФП є більш консервативною, ніж моя власна точка зору. На мою думку, принципи ФП можуть знайти застосування у ширшому спектрі програм, ніж пропонується у статті.

                    На закінчення:


                    "An Introduction to the basic principles of Functional Programming" слугує ґрунтовним посібником з парадигми ФП, що поєднує в собі її переваги та виклики. Незважаючи на те, що існують розбіжності між поглядами автора і моїми, стаття залишається похвальною роботою, яка пропонує цінну інформацію про світ функціонального програмування.

                    Дякую, що витратили свій час та приділили моїй рецензії увагу! 😇
            </article_body>
        </content>



        <authors_image>../img/Kyrylo_K.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Анна К.</username>
                        <date>неділя 8 жовтня 2023</date>
                        <time>16:40 PM</time>
                        <response>
                            Щиро вдячна за вашу рецензію статті "An Introduction to the basic principles of Functional Programming"! Ви дуже чітко висловили свої думки та поділилися власними переконаннями щодо основних принципів функціонального програмування. Оцінка переваг та викликів ФП, яку ви зробили, додає значущості статті та надає корисний взірець для читачів.

                            Ваша позиція стосовно кривої навчання ФП і проблем продуктивності додає глибину дискусії і підкреслює важливість належного навчання та оптимізації для досягнення успіху у цій парадигмі програмування. Ви також правильно зазначили, що принципи ФП можуть знайти застосування у більшій кількості програм, ніж це може здаватися на перший погляд, і це є важливим аспектом для розвитку програмістів.

                            Загалом, ваша рецензія є інформативною та обґрунтованою, і вона буде корисною для тих, хто цікавиться ФП та прагне зрозуміти його основні принципи. Дякую за вашу докладну та об'єктивну думку! 😊👏                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Anna_K.png</authors_image>
            </comment>
            

            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Кирило К.</username>
                        <date>неділя 8 жовтня 2023</date>
                        <time>22:42 PM</time>
                        <response>
                            Дякую за приємний відгук! ❤️                        
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Kyrylo_K.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Артем С.</username>
                        <date>понеділок 16 жовтня 2023</date>
                        <time>21:21 PM</time>
                        <response>
                            Від прочитання даної рецензії в мене виникли виключно позитивні відчуття! Вона є дуже обгрунтованою та інформативною, включаючи в себе чіткі думки щодо кожного позитивного та негативного аспекта статті. Мене також вразила структурованість цього есе: за обсягом воно спочатку здалось великим, але завдяки тому, що Кирило розбив його по пунктах, читати цей коментар було одне задоволення.
                            Окремо хочеться подякувати автору за те, що він простими словами роз'яснив сутність основоположних принципів ФП, це свідчить про уважне читання та відмінне розуміння матеріалу, може виявитись корисним для новачків цієї парадигми. Вартий уваги той момент, що Кирило не просто підкреслив свої деякі розбіжності в думках з автором статті, але й пояснив чому він так вважає. Доречі, я також вважаю, що автор якось недооцінює можливості принципів ФП, та вони є більш універсальними, ніж здається.
                            Загалом, ця публікація чітко показує, що Кирило глибоко проаналізував статтю, правильно підкресливши позитивні моменти та недоліки, зробивши стислі та пізнавальні висновки.Безперечно, цінною виявилась інформація щодо сутності основних принципів ФП. Ця рецензія може бути дуже корисною для людей, які не просто цікавляться цією парадигмою програмування, але й хочуть прочитати цікавий та стислий огляд статті.                        
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Artem_S.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Кирило К.</username>
                        <date>понеділок 16 жовтня 2023</date>
                        <time>21:26 PM</time>
                        <response>
                            Приємно чути від вас такі теплі слова 😘
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Kyrylo_K.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Дмитро А.</username>
                        <date>понеділок 16 жовтня 2023</date>
                        <time>21:58 PM</time>
                        <response>
                            Шановний Кирило, Ваша рецензія, щодо статті "An Introduction to the basic principles of Functional Programming" відзначається своєю глибокою розробкою принципів функціонального програмування (ФП). Мені дуже подобається, що вона чітко пояснює ініціюючи концепції, такі як незмінність даних, без статусність функцій, першокласні функції та рекурсія, які є важливими в ФП, і добре, що ви підкреслили всі основні концепції. Рецензія пропонує баланс між визначенням переваг ФП та висвітленням можливих викликів і накладних витрат, що можуть виникнути при впровадженні цієї парадигми. Дуже Вам вдячний, що Ви виділили важливість незмінності, чистоти функцій та першокласних функцій, що робить рецензію цікавою та інформативною. Зважаючи на різноманітність думок щодо кривої навчання та застосовності ФП, Ваша думка все ж залишається інформативною та корисною для розуміння основ цієї парадигми програмування. У цілому, рецензія Кирила є корисним джерелом для розуміння основ ФП, і вона рекомендована для тих, хто цікавиться цією парадигмою програмування. Я дуже вдячний Кирилу за його думки, які пропонують подивитись на функціональне програмування більш ширше і надихають вивчати цю захоплюючу парадигму.                        
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Dmytro_A.png</authors_image>
            </comment>
            

            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Кирило К.</username>
                        <date>неділя 8 жовтня 2023</date>
                        <time>22:42 PM</time>
                        <response>
                            Красно дякую за ваші добрі слова та зацікавленість у моїй рецензії 🥰                    
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Kyrylo_K.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Микита О.</username>
                        <date>середа 18 жовтня 2023</date>
                        <time>18:36 PM</time>
                        <response>
                            Ви ретельно розглянули ключові аспекти ФП, які були висвітлені у статті, і надали свою думку щодо них. Ось мої коментарі:

                            Крива навчання: Справді, крива навчання може бути різною для різних людей. Для деяких, перехід від імперативного програмування до ФП може бути відносно простим, а для інших - вимагати більше часу і практики. Важливо пам'ятати, що кожен має свій власний шлях навчання.

                            Продуктивність: Ваша зауваження стосовно накладних витрат на продуктивність також доречні. Сучасні інструменти та компілятори для ФП мов дозволяють оптимізувати код і покращити продуктивність, що може зменшити вплив незмінності та рекурсії.

                            Застосовність: Ваша точка зору, щодо ширшої застосовності ФП, цілком обгрунтована. Функціональне програмування може бути корисним у багатьох галузях, і його принципи можуть допомогти вдосконалити код та зробити його більш чистим і зрозумілим.

                            Ваш коментар вказує на важливі роздуми щодо ФП і може стати корисним для тих, хто розглядає цю парадигму програмування. Дякую за ваши спостереження та висловлену думку! 😊
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Mykyta_O.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Функціональне програмування процвітає: Глибоке занурення в елегантність функціонального програмування"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Кирило К.</username>
                        <date>середа 18 жовтня 2023</date>
                        <time>18:47 PM</time>
                        <response>                                                        
                            Дякую за ваш відгук! 😇
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Kyrylo_K.png</authors_image>
            </comment>
        </comments>
    </article> 


    <article category="An Introduction to the basic principles of Functional Programming">
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"Мистецтво Функціонального програмування: Як автори статей впливають на наш погляд на розробку ПЗ"</article_name>
                </user_article>
                <user_full_information>
                    <username>Яна Г.</username>
                    <date>субота 30 вересня 2023</date>
                    <time>22:08 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>Мистецтво Функціонального програмування: Як автори статей впливають на наш погляд на розробку ПЗ</topic>
            <article_body>
                    Привіт! Сьогодні я хочу обговорити одну цікаву статтю “Functional Programming Concepts” і її написав TK. У цій статті автор розповідає про те, що таке функціональне програмування, як воно відрізняється від об’єктно-орієнтованого програмування, і чому воно може бути корисним для розробників.

                    Після прочитання мені здалося, що в статті є багато цікавих ідей та фактів. Я хочу поділитися з вами своїми думками, проаналізувавши за допомогою критеріїв, якими користуюся для оцінки інформації.

                    Так от, почнемо з першого критерію: вивчити ідеї та порівняти їх із тим, що я вже знаю. Якщо ви не зовсім розумієте, що таке функціональне програмування, то не хвилюйтеся - я теж не дуже була обізнана до того, як прочитала статтю. Функціональне програмування - це спосіб писати програми за допомогою функцій. Це дуже відрізняється від об’єктно-орієнтованого програмування, яке я знаю краще. У об’єктно-орієнтованому програмуванні програми складаються з об’єктів, які мають поля (дані) та методи (функції).

                    Я порівняла ці два способи і побачила, що вони мають свої переваги та недоліки. Функціональне програмування дозволяє писати більш простий, стабільний та передбачуваний код, уникаючи зміни стану та побічних ефектів. Об’єктно-орієнтоване програмування дозволяє писати більш модульний, гнучкий та повторно використовуваний код, використовуючи концепції класификации та наследования.

                    Тепер перейдемо до другого критерiю: зазирнути за текст i помiркувати, що могло вплинути на автора. Я спробую зрозумiти, хто є автором цiеi статтi i чому вiн написав їï. Його “ім’я” TK і що він є розробником, який працює з різними мовами програмування. Я також побачила, що він має багато статей про програмування, в тому числі про функціональне програмування. Зрозуміла, що автор має досвід роботи з об’єктно-орієнтованим програмуванням, але шукає способи зменшити складність системи та покращити якість коду. Можливо, автор мотивований популяризувати функціональне програмування серед початківців та середнього рівня розробників.

                    Тепер я хочу задати декілька запитань. Це третій критерій для аналізу інформації.

                    Коли було написано та опубліковано статтю? Чи вона актуальна та своєчасна? Стаття була опублікована 14 лютого 2021 року на сайті freeCodeCamp. Це означає, що стаття досить свіжа і актуальна, оскільки функціональне програмування є одним з найбільш популярних і перспективних напрямків у сучасному світі програмування.

                    Для кого було написано статтю? Яка цiльова аудиторiя та їï потреби? Стаття була написана для людей, якi хочуть дiзнатися про функцiональне програмування або покращити своï навички у цьому напрямку. Цiльова аудиторiя - це початкiвцi та середнього рiвня розробники, якi мають деяке знання про об’єктно-орiентоване програмування, але хочуть спробувати щось нове та iнновацiйне.

                    Подивившись на структуру статті я побачила, що вона складається з п’яти основних частин: вступ, чисті функції, незмінність даних, функції першого класу та вищого порядку та заключення. Оцінила кожну частину статті за такими параметрами: ясність, повнота, зв’язок і оригінальність. Я зробила висновок, що стаття добре написана і організована. Автор використовує просту та зрозумілу мову, а також наочні приклади коду, щоб пояснити основні концепції та переваги функціонального програмування.

                    Я порівняла інформацію, яку надав автор, з тим, що я вже знаю про функціональне програмування та мову Clojure. Я виявила, що більша частина інформації збігається з моїми знаннями та джерелами, якими я користувався раніше. Я також дізналася деякі нові факти та прийоми, які мені здалися цікавими та корисними. Ось деякі приклади:

                    Я вже знала, що чиста функція - це функція, яка не має побічних ефектів і не залежить від зовнішнього стану. Але я не знала, що чиста функція має таку властивість, як референтна прозорість. Це означає, що чисту функцію можна замінити її результатом без зміни поведінки програми. Це дуже круто!

                    Вже знала, що функцiя першого класу - це функцiя, яка може бути передана або повернута як данi. Але я не знала, що функцiя вищого порядку - це функцiя, яка приймаï або повертаï iншу функцiю. Я також не знала, що Clojure маï такi потужнi функцiï вищого порядку, як map, filter i reduce. Цi функцiï дозволяють обробляти колекцiï даних за допомогою iнших функцiй.

                    Я можу сказати, що стаття має достатньо достовiрноï i актуальноï iнформацiï про функцiональне програмування та мову Clojure. Автор базується на своïх досвiдах та ресурсах, якi вiн надає у кiнцi статтi. Автор також користується своïми словами i думками, а не копiює або плагiатить з iнших джерел.

                    Я знаю, що немає такої речі, як абсолютна об’єктивність у людському знанні. Кожен автор має свою точку зору, свої цінності, свої інтереси та свої мотиви. Кожен автор також має свою аудиторію, свою мету, свою платформу та свої джерела. Усе це впливає на те, що автор вибирає показати або приховати, акцентувати або ігнорувати, погодитися або заперечити. Усе це створює упередження у тому, як автор подає інформацію.

                    Намагаючись виявити та оцінити упередження автора статті про функціональне програмування. Я задаю собі такі запитання:

                    Яке ставлення автора до функціонального програмування? Чи він захоплюється ним, чи критичний до нього, чи нейтральний? Чи він висвітлює переваги та недоліки обох парадигм, чи він схильний до одної з них? Як автор використовує джерела та цитати? Чи вони достовiрнi та об’ективнi, чи вони суб’ективнi та сприятливi?

                    Відповідаючи, можу сказати, що автор має позитивне ставлення до функціонального програмування і хоче переконати читачiв у його перевагах. Автор також має дещо негативне до об’єктно-орiентованого програмування i хоче показати його недолiки. TK обирає приклади коду на Clojure та Java таким чином, щоб пiдкреслити рiзницю мiж двома парадигмами i продемонструвати перевагу функцiонального пiдходу. Автор використовує джерела та цитати з сайтiв i книг, якi пiдтримують його точку зору i не надає альтернативних або критичних поглядiв.

                    Тобто, можу зробити висновок, що стаття має упередження на користь функціонального програмування та проти об’єктно-орієнтованого програмування. Автор не намагається бути об’єктивним або балансованим, а натомість використовує переконливі техніки, щоб вплинути на читачiв.

                    У цілому, стаття є корисним та цікавим вступом до функціонального програмування, який може заохотити читачів дізнатися більше про цю парадигму. Однак, стаття не містить жодної критики або обмежень функціонального програмування, що може створити нереалістичне уявлення про цю парадигму. Читачам слід бути критичними та досліджувати функціональне програмування з різних точок зору.

                    

                    Також, я знайшла деякі зовнішні посилання:

                    —   What is Functional Programming?: це стаття, яка також пояснює, що таке функціональне програмування та як воно працює. Автор не висловлює свою точку зору, а намагається бути інформативним і зрозумілим. Автор також не порівнює функціональне програмування з іншими парадигмами.

                    —   Functional vs Object-OrientedProgramming: The Pros and Cons: це стаття, яка розглядає переваги та недоліки обох парадигм. Автор аналізує такі аспекти, як читабельність, тестування, продуктивність, масштабованість та популярність. Автор не висловлює свою точку зору, а намагається бути справедливим і об’єктивним.


            </article_body>
        </content>



        <authors_image>../img/Yana_H.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Мистецтво Функціонального програмування: Як автори статей впливають на наш погляд на розробку ПЗ"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Віктор П.</username>
                        <date>субота 30 вересня 2023</date>
                        <time>22:42 PM</time>
                        <response>
                                Дорога Яночка,

                                Твій аналіз статті "Functional Programming Concepts" від автора TK дуже вражає своєю глибиною та докладністю. Ти досить детально розглянула статтю за допомогою різних критеріїв та поділилась своїми враженнями та аналізом з нами, читачами твого есе. Воно показує, що ти не лише прочитала статтю, але і ретельно розглянула її контекст, структуру, мету та можливі впливи.

                                Особливо важливим, що я помітив, є те, що ти поділилася своїми власними враженнями та висновками після аналізу, розглянула, як стаття порівнює функціональне та об’єктно-орієнтоване програмування та надала заключення про те, для кого ця стаття може бути корисною.

                                Твоє есе також показує уважність до деталей та здатність аналізувати інформацію з кількох точок зору. Навіть коли ти виявила упередження в статті на користь функціонального програмування, то вказала на це і надала пораду нам, читачам, бути критичними (що є обов'язковим завжди).

                                Я також підтримую твою думку щодо того, що стаття могла б бути більш збалансованою, включаючи критику чи обмеження функціонального програмування. Це б допомогло читачам статті отримати більш об'єктивне уявлення про тему.

                                Ще однією сильною стороною твого есе є те, що ти намагалась зрозуміти мотиви та цілі автора статті, а також розглянула, наскільки інформація в статті відповідає нашим власним знанням та досвіду.

                                Загалом, я поділяю твої погляди щодо нерівноцінного порівняння парадигм, на чому ти зауважила, та, звісно ж, важливість критичного мислення та розгляду різних точок зору при аналізі інформації твоє все.

                                Бажаю тобі подальших успіхів у аналізі та рецензуванні інших матеріалів та статей!

                                З найкращими побажаннями, Вітюша!
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Victor_P.png</authors_image>
            </comment>
            

            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Мистецтво Функціонального програмування: Як автори статей впливають на наш погляд на розробку ПЗ"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Володимир В.</username>
                        <date>вівторок 17 жовтня 2023</date>
                        <time>22:27 PM</time>
                        <response>
                                Яно, ви проробили дуже велику роботу перед написанням цієї рецензії, дякую вам. Мені дуже сподобалася ваша рецензія, далі розповім побільше чому саме:

                                Аналіз структури інформації в статті виконаний ретельно. Підходи до оцінки ясності, повноти, зв'язку та оригінальності кожної частини статті надають читачам важливу інформацію про те, що вони можуть очікувати від матеріалу.

                                Рецензія вдало виявила нові знання та прийоми, які автор статті представив, і здійснила їх аналіз. Це допомагає читачам зрозуміти, чи є стаття корисною для їхнього рівня знань.

                                Важливим аспектом рецензії є аналіз упереджень автора. Яна правильно зауважила, що у статті присутні упередження на користь функціонального програмування і проти об'єктно-орієнтованого програмування. Цей аналіз важливий для того, щоб читачі були свідомі можливих біасів автора та розуміли, що існують різні точки зору на цю тему.

                                Рецензія також включає аналіз підходу автора до вибору джерел та цитат. Яна зауважила, що автор використовує джерела та цитати, які підтримують його точку зору, і не надає альтернативних або критичних поглядів. Це допомагає читачам розуміти контекст та джерела інформації.

                                У цілому, ця рецензія допомагає читачам розібратися в суті статті, виявити сильні сторони та можливі недоліки, і підходити до матеріалу більш критично.
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Volodymyr_V.png</authors_image>
            </comment>


            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Мистецтво Функціонального програмування: Як автори статей впливають на наш погляд на розробку ПЗ"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Софія Л.</username>
                        <date>четвер 19 жовтня 2023 16:19 PM</date>
                        <time>16:19 PM</time>
                        <response>
                                Яно, який же цікавий аналіз ви зробили! Цей коментар я бачу унікальним у цьому форумі у тому як ви використали критерії для аналізу інформації, взяли до уваги і авторські погляди, і структуру матеріалу, і порівняли інформацію з власними знаннями та протягом есе ставили собі запитання. Я дуже ціную працю, яку ви зробили для написання цього. Ваша увага до деталей, таких як структура статті, ясність викладу, оригінальність матеріалу та відсутність плагіату, є важливою для мене, тому що, допомагає іншим читачам розуміти, наскільки вони можуть довіряти даному джерелу.

                                Хоча я бачу деякі малі прогалини(це не погано, просто каже, що я теж була уважною до деталей):
                                Ви(у четвертому абзаці) пишете, що порівняєте ФП та ООП на перевагах та недоліках, але далі перелічуєте тільки переваги.
                                Ви(у сьомому абзаці) хочете зрозуміти коли опубліковано статтю та чи є вона актуальною та своєчасною, кажучи коротко, пишете, що вона 14 лютого 2021 року, тому свіжа й актуальна т.к. функціональне програмування є перспективним. Але стаття була опублікована 15 листопада 2018 року. Сам рік не є відповіддю на те чи є стаття актуальною(у сенсі часу). Як на мене, вона є актуальною до сьогодні, тому що базові принципи ФП за цей час не змінились, як я це знаю.
                                До речі, ви пишете(у дев’ятому абзаці), що зміст складається з «вступ, чисті функції, незмінність даних, функції першого класу та вищого порядку та заключення», але пропустили пункт «referential transparency» а самого заключення нема. Замість нього «Resources» і в кінці подяка та посилання на репозиторії. Ви пишете, що оцінили кожну частину статті за ясністю, повнотою, зв’язком та оригінальністю, хоча в кінці тільки сумуєте, що стаття добре написана і організована. Приклади коду там наочні, хоча у деяких випадках коду нема(коли автор каже, що зараз буде код, але там нічого не буде), про що ви згадувати не будете у своєму критичному есе.

                                Але вищезгадане не робить ваш відгук гірше: я все одно довше можу розмовляти чим мені він подобається, ніж які моменти не є достовірними. Приємно бачити порівняння знань, які ви вже мали, та які отримали при читанні статті. Ваша критика щодо потенційного упередження автора також важлива. Завжди корисно мати критичний погляд на матеріали, які ми читаємо, особливо коли йдеться про технічні теми. Я погоджуюся, що автори мають бути об'єктивними і збалансованими у своїх оцінках, особливо коли вони порівнюють різні підходи або технології.

                                Дякую за чудовий приклад аналізу! Яно, ваше бачення прикрасило цей форум, та допоможе його учасникам, які читали ваше есе, у майбутньому краще оцінювати і аналізувати технічні статті. Надіюсь бачити більше таких глибоких аналізів у цьому обговоренні!
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Sophia_L.png</authors_image>
            </comment>


        </comments>
    </article> 


    <article category="(Functional) OOP With Message Passing"> 
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"Об'єднуючи сутність: від передачі повідомлень до функціонального визначення."</article_name>
                </user_article>
                <user_full_information>
                    <username>Артур Н.</username>
                    <date>понеділок 27 листопада 2023</date>
                    <time>18:30 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>Об'єднуючи сутність: від передачі повідомлень до функціонального визначення.</topic>
            <article_body>
                    На мою думку, стаття "Functional OOP With Message Passing" від Дугласа Рочи закликає читачів подумати про справжню сутність ООП і розглянути альтернативні підходи до його реалізації. Матеріал пропонує скромну реалізацію та заохочує дослідити інші можливості.

                        Я згоден з автором, який висловлює думку, що основна ідея ООП, визначена Аланом Кеєм, - це концепція передачі повідомлень, тоді як сучасні мови більше уваги приділяють синтаксису, ніж самому процесу передачі повідомлень.

                        У статті розглядається перетворення звичайної функції на об'єкт за допомогою ключового слова "class" в JavaScript. Автор пропонує розглянути альтернативний підхід, використовуючи лише функції, щоб втілити ООП.

                        Також для мене є цікавою ідея використання концепції "повідомлення" для створення об'єктів, де кожен об'єкт має різні обробники для різних типів повідомлень. Я вважаю, що такий підхід може бути більш гнучким і розділеним у порівнянні з традиційним ООП.

                        Наприкінці статті автор дотикається концепцій успадкування та поліморфізму, показуючи, як їх можна реалізувати за допомогою функцій та передачі повідомлень. Мені дуже сподобалось, як саме було використано успадкування та поліморфізм на прикладі зі студентом.

                        У підсумку хочу зазначити, що стаття Дугласа Рочи є цікавою постановкою питання про можливості ООП. Однак, на мою думку, для глибшого розуміння сутності цього питання та визначення оптимального підходу до програмування, може бути корисно розглянути також аспекти функціонального програмування та провести докладне порівняння обох підходів.
            </article_body>
        </content>



        <authors_image>../img/Artur_N.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Об'єднуючи сутність: від передачі повідомлень до функціонального визначення."</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Кирило К.</username>
                        <date>вівторок 28 листопада 2023</date>
                        <time>22:19 PM</time>
                        <response>
                            Артур чітко розуміє основні ідеї статті та висловлює свою думку з обґрунтуванням.

                            Що мені сподобалося:

                            Артур правильно визначив основну ідею статті, яка полягає в тому, що ООП можна реалізувати за допомогою передачі повідомлень.
                            Автор рецензії також вірно зазначив, що сучасні мови програмування, такі як JavaScript, більше уваги приділяють синтаксису ООП, ніж самому процесу передачі повідомлень.
                            Йому сподобалася ідея використання концепції "повідомлення" для створення об'єктів, де кожен об'єкт має різні обробники для різних типів повідомлень. Цей підхід може бути більш гнучким і розділеним у порівнянні з традиційним ООП.
                            Він також високо оцінив приклад використання успадкування та поліморфізму на прикладі зі студентом.

                            Що можна покращити:

                            У рецензії можна було б більш детально розглянути аспекти функціонального програмування, які розглядаються у статті. Це дозволило б Артуру глибше зрозуміти сутність питання про можливості ООП та визначити оптимальний підхід до програмування.
                            Також було б корисно провести докладне порівняння ООП та функціонального програмування, щоб показати їхні переваги та недоліки.
                            У цілому, рецензія Артура є високоякісною та корисною для читачів, які цікавляться ООП.
                        </response>
                    </user_full_information>
                </commentator_data>

                <authors_image>../img/Kyrylo_K.png</authors_image>
            </comment>
        </comments>
    </article> 


    <article category="(Functional) OOP With Message Passing">
        <meta_data>
            <user_date>
                <user_article>
                    <article_name>"Innovative approaches to object-oriented programming"</article_name>
                </user_article>
                <user_full_information>
                    <username>Микита О.</username>
                    <date>пʼятниця 10 листопада 2023</date>
                    <time>19:59 PM</time>
                </user_full_information>
            </user_date>
        </meta_data>


        <content>
            <topic>Innovative approaches to object-oriented programming</topic>
            <article_body>
                    The article takes an alternative look on object-oriented programming and the role of message passing in it. It places an emphasis on the history of ideas of objects and message passing and argues modern programming languages frequently focus on the syntax of ideas borrowed from the C programming language rather than on the message passing itself which it treats as a fundament.

                    The approach in the article on creating objects and classes in JavaScript seems to me very interesting – with the help of functional programming and message passing. This improves the intelligibility of the code and permits for the embedding of information and functions within entities, with communication through messages ensured among them.

                    This article also illustrates how to apply inheritance and polymorphism by creating a chain of objects. This shows the flexibility of the approach and also multi-level hierarchies, which are important aspects in object orientation programme (OOP).

                    Generally, this article offers an informative glance on OOP and ways of implementing it in a programming language, which can be essential in terms of comprehending fundamental OOP concepts and message passing.


            </article_body>
        </content>



        <authors_image>../img/Mykyta_O.png</authors_image>


        <comments>
            <comment>
                <commentator_data>
                    <user_article>
                        <to_article>"Innovative approaches to object-oriented programming"</to_article>
                    </user_article>
                    <user_full_information>
                        <username>Кирило К.</username>
                        <date>вівторок 28 листопада 2023</date>
                        <time>20:37 PM</time>
                        <response>
                                Рецензія про ООП та обмін повідомленнями вразила мене своєю глибиною аналізу та акцентом на історію ідей, що допомагає краще зрозуміти ці концепції. Застосування функціонального програмування в JavaScript для створення об'єктів і класів також виявилося дуже цікавим і корисним. Проте, брак конкретних прикладів і порівняльного аналізу з іншими підходами в ООП міг би зробити рецензію ще більш цінною. Незважаючи на це, рецензія виявилася дуже інформативною і збагатила моє розуміння ключових аспектів об'єктно-орієнтованого програмування.
                        </response>
                    </user_full_information>
                </commentator_data>
                <authors_image>../img/Kyrylo_K.png</authors_image>
            </comment>
        </comments>
    </article>
</forum>
